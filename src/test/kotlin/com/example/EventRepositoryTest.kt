package com.example

import io.kotest.core.spec.style.ShouldSpec
import io.kotest.matchers.shouldBe
import io.kotest.matchers.shouldNotBe
import io.micronaut.test.extensions.kotest5.annotation.MicronautTest

@MicronautTest
class EventRepositoryTest(
    private val eventRepository: EventRepository,
    private val childRepository: ChildRepository,
) : ShouldSpec({
    should("bind 'id' value generated by database when using 'save()'") {
        val child = childRepository.save(Child(value = "child1"))
        val event = eventRepository.save(Event(property = "test", child = child))

        event.id shouldNotBe null
    }

    should("bind 'createdAt' value generated by database when using 'save()'") {
        val child = childRepository.save(Child(value = "child1"))
        val event = eventRepository.save(Event(property = "test", child = child))

        event.createdAt shouldNotBe null
    }

    should("bind 'child' relation when using 'save()'") {
        val child = childRepository.save(Child(value = "child2"))
        val event = eventRepository.save(Event(property = "test", child = child))

        event.child shouldNotBe null
        event.child!!.value shouldBe child.value
    }

    should("bind 'id' value generated by database when using 'saveReturning()'") {
        val child = childRepository.save(Child(value = "child3"))
        val event = eventRepository.saveReturning(Event(property = "test", child = child))

        event.id shouldNotBe null
    }

    should("bind 'createdAt' value generated by database when using 'saveReturning()'") {
        val child = childRepository.save(Child(value = "child3"))
        val event = eventRepository.saveReturning(Event(property = "test", child = child))

        event.createdAt shouldNotBe null
    }
})
